{% extends "_base.svh.jinja" %}
{% block comment_header %}
//==============================================================================
// Description: The {{agent.name|upper}} UVM Monitor
//==============================================================================
{% endblock %}
{% block body %}
class {{ agent.name }}_monitor extends uvm_component;
    `uvm_component_utils({{ agent.name }}_monitor)

    // Virtual Interface
    local virtual {{ agent.name }}_monitor_bfm m_bfm;

    //------------------------------------------
    // Data Members
    //------------------------------------------
    {{ agent.name }}_agent_config m_cfg;

    // TODO: Any custom members

    //------------------------------------------
    // Component Members
    //------------------------------------------
    uvm_analysis_port #({{ agent.name }}_seq_item) ap;

    //------------------------------------------
    // Methods
    //------------------------------------------

    // Standard UVM Methods:

    function new(string name = "{{ agent.name }}_monitor", uvm_component parent = null);
        super.new(name, parent);
    endfunction

    function void build_phase(uvm_phase phase);
        `get_config({{ agent.name }}_agent_config, m_cfg, "{{ agent.name }}_agent_config")
        m_bfm = m_cfg.mon_bfm;
        m_bfm.proxy = this;

        ap = new("ap", this);
    endfunction: build_phase

    task run_phase(uvm_phase phase);

        // TODO: Run the monitor

    endtask: run_phase

    function void report_phase(uvm_phase phase);
        // Might be a good place to do some reporting on no of analysis transactions sent etc
    endfunction: report_phase

    // Proxy Methods:
    function void notify_transaction({{ agent.name }}_seq_item item);
        ap.write(item);
    endfunction : notify_transaction

endclass: {{ agent.name }}_monitor
{% endblock %}